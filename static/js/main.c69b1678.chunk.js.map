{"version":3,"sources":["styles.ts","components/NewItemForm.tsx","hooks/useFocus.ts","components/AddNewItem.tsx","utils/arrayUtils.ts","store/appStateReducer.ts","store/AppStateContext.tsx","components/Card.tsx","store/actions.ts","utils/isHidden.ts","components/Column.tsx","hooks/useItemDrag.ts","App.tsx","index.tsx"],"names":["AppContainer","styled","div","DragPreviewContainer","props","isHidden","ColumnContainer","ColumnTitle","CardContainer","AddItemButton","button","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","NewItemForm","onAdd","useState","text","setText","inputRef","ref","useRef","useEffect","current","focus","useFocus","value","onKeyPress","e","key","onChange","target","onClick","AddNewItem","toggleButtonText","showForm","setShowForm","findItemIndexById","items","id","findIndex","item","moveItem","array","from","to","index","slice","insertItemAtIndex","removeItemAtIndex","appStateReducer","draft","action","type","lists","push","nanoid","payload","tasks","listId","targetListIndex","draggedId","hoverId","dragIndex","hoverIndex","draggedItem","appData","AppStateContext","createContext","AppStateProvider","children","useImmerReducer","state","dispatch","Provider","getTasksByListId","find","list","useAppState","useContext","Card","setDraggedItem","itemType","Boolean","Column","useDrop","accept","hover","drop","drag","useDrag","end","useItemDrag","map","task","addTask","App","addList","ReactDOM","render","StrictMode","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.c69b1678.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const AppContainer = styled.div`\n  align-items: flex-start;\n  background-color: #3179ba;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  padding: 20px;\n  width: 100%;\n`;\n\ninterface DragPreviewContainerProps {\n  isHidden?: boolean;\n}\n\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n  opacity: ${(props) => (props.isHidden ? 0.3 : 1)};\n`;\n\nexport const ColumnContainer = styled(DragPreviewContainer)`\n  background-color: #ebecf0;\n  width: 300px;\n  min-height: 40px;\n  margin-right: 20px;\n  border-radius: 3px;\n  padding: 8px 8px;\n  flex-grow: 0;\n`;\n\nexport const ColumnTitle = styled.div`\n  padding: 6px 16px 12px;\n  font-weight: bold;\n`;\n\nexport const CardContainer = styled(DragPreviewContainer)`\n  background-color: #fff;\n  cursor: pointer;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  max-width: 300px;\n  border-radius: 3px;\n  box-shadow: #091e4240 0 1px 0 0;\n`;\n\ntype AddItemButtonProps = { dark?: boolean };\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n  background-color: #ffffff3d;\n  border-radius: 3px;\n  border: none;\n  color: ${(props) => (props.dark ? \"#000\" : \"#fff\")};\n  cursor: pointer;\n  max-width: 300px;\n  padding: 10px 12px;\n  text-align: left;\n  transition: background 85ms ease-in;\n  width: 100%;\n  &:hover {\n    background-color: #ffffff52;\n  }\n`;\n\nexport const NewItemFormContainer = styled.div`\n  max-width: 300px;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: flex-start;\n`;\n\nexport const NewItemButton = styled.button`\n  background-color: #5aac44;\n  border-radius: 3px;\n  border: none;\n  box-shadow: none;\n  color: #fff;\n  padding: 6px 12px;\n  text-align: center;\n`;\n\nexport const NewItemInput = styled.input`\n  border-radius: 3px;\n  border: none;\n  box-shadow: #091e4240 0 1px 0 0;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  width: 100%;\n`;\n\nexport const CustomDragLayerContainer = styled.div`\n  height: 100%;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 100;\n`;\n","import React, { useState } from \"react\";\nimport { NewItemButton, NewItemFormContainer, NewItemInput } from \"../styles\";\nimport { useFocus } from \"../hooks/useFocus\";\n\ntype NewItemFormProps = {\n  onAdd(text: string): void;\n};\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\n  const [text, setText] = useState(\"\");\n  const inputRef = useFocus();\n\n  const handleAddText = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      onAdd(text);\n    }\n  };\n\n  return (\n    <NewItemFormContainer>\n      <NewItemInput\n        ref={inputRef}\n        value={text}\n        onKeyPress={handleAddText}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <NewItemButton onClick={() => onAdd(text)}>Create</NewItemButton>\n    </NewItemFormContainer>\n  );\n};\n","import { useEffect, useRef } from \"react\";\n\nexport const useFocus = () => {\n  const ref = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    ref.current?.focus();\n  }, []);\n\n  return ref;\n};\n","import { AddItemButton } from \"../styles\";\nimport { useState } from \"react\";\nimport { NewItemForm } from \"./NewItemForm\";\n\ntype AddNewItemProps = {\n  onAdd(text: string): void;\n  toggleButtonText: string;\n  dark?: boolean;\n};\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n  const { onAdd, toggleButtonText, dark } = props;\n  const [showForm, setShowForm] = useState(false);\n\n  if (showForm) {\n    return (\n      <NewItemForm\n        onAdd={(text) => {\n          onAdd(text);\n          setShowForm(false);\n        }}\n      />\n    );\n  }\n\n  return (\n    <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n      {toggleButtonText}\n    </AddItemButton>\n  );\n};\n","type Item = { id: string };\n\nexport const findItemIndexById = <TItem extends Item>(\n  items: TItem[],\n  id: string\n) => {\n  return items.findIndex((item: TItem) => item.id === id);\n};\n\nexport const moveItem = <TItem>(array: TItem[], from: number, to: number) => {\n  const item = array[from];\n  return insertItemAtIndex(removeItemAtIndex(array, from), item, to);\n};\n\nexport function removeItemAtIndex<TItem>(array: TItem[], index: number) {\n  return [...array.slice(0, index), ...array.slice(index + 1)];\n}\n\nexport function insertItemAtIndex<TItem>(\n  array: TItem[],\n  item: TItem,\n  index: number\n) {\n  return [...array.slice(0, index), item, ...array.slice(index)];\n}\n","import { nanoid } from \"nanoid\";\nimport { Action } from \"./actions\";\nimport { findItemIndexById, moveItem } from \"../utils/arrayUtils\";\nimport { DragItem } from \"../DragItem\";\n\nexport type Task = {\n  id: string;\n  text: string;\n};\n\nexport type List = {\n  id: string;\n  text: string;\n  tasks: Task[];\n};\n\nexport type AppState = {\n  lists: List[];\n  draggedItem: DragItem | null;\n};\nexport const appStateReducer = (\n  draft: AppState,\n  action: Action\n): AppState | void => {\n  switch (action.type) {\n    case \"ADD_LIST\": {\n      draft.lists.push({\n        id: nanoid(),\n        text: action.payload,\n        tasks: [],\n      });\n      break;\n    }\n    case \"ADD_TASK\": {\n      const { text, listId } = action.payload;\n      const targetListIndex = findItemIndexById(draft.lists, listId);\n      draft.lists[targetListIndex].tasks.push({ id: nanoid(), text });\n      break;\n    }\n    case \"MOVE_LIST\": {\n      const { draggedId, hoverId } = action.payload;\n      const dragIndex = findItemIndexById(draft.lists, draggedId);\n      const hoverIndex = findItemIndexById(draft.lists, hoverId);\n      draft.lists = moveItem(draft.lists, dragIndex, hoverIndex);\n      break;\n    }\n    case \"SET_DRAGGED_ITEM\": {\n      draft.draggedItem = action.payload;\n      break;\n    }\n    default: {\n      break;\n    }\n  }\n};\n","import { createContext, Dispatch, FC, useContext } from \"react\";\nimport { appStateReducer, AppState, List, Task } from \"./appStateReducer\";\nimport { Action } from \"./actions\";\nimport { useImmerReducer } from \"use-immer\";\nimport { DragItem } from \"../DragItem\";\n\nconst appData: AppState = {\n  draggedItem: null,\n  lists: [\n    {\n      id: \"0\",\n      text: \"To Do\",\n      tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }],\n    },\n    {\n      id: \"1\",\n\n      text: \"In Progress\",\n      tasks: [{ id: \"c2\", text: \"Learn Typescript\" }],\n    },\n    {\n      id: \"2\",\n      text: \"Done\",\n      tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }],\n    },\n  ],\n};\n\ntype AppStateContextProps = {\n  draggedItem: DragItem | null;\n  lists: List[];\n  getTasksByListId(id: string): Task[];\n  dispatch: Dispatch<Action>;\n};\n\nconst AppStateContext = createContext<AppStateContextProps>(\n  {} as AppStateContextProps\n);\n\nexport const AppStateProvider: FC = ({ children }) => {\n  const [state, dispatch] = useImmerReducer(appStateReducer, appData);\n  const { draggedItem, lists } = state;\n  const getTasksByListId = (id: string) => {\n    return lists.find((list) => list.id === id)?.tasks || [];\n  };\n  return (\n    <AppStateContext.Provider\n      value={{ draggedItem, lists, getTasksByListId, dispatch }}\n    >\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n\nexport const useAppState = () => {\n  return useContext(AppStateContext);\n};\n","import { CardContainer } from \"../styles\";\n\ntype CardProps = {\n  id: string;\n  text: string;\n};\n\nexport const Card = ({ text }: CardProps) => (\n  <CardContainer>{text}</CardContainer>\n);\n","import { DragItem } from \"../DragItem\";\n\nexport type Action =\n  | {\n      type: \"ADD_LIST\";\n      payload: string;\n    }\n  | {\n      type: \"ADD_TASK\";\n      payload: { text: string; listId: string };\n    }\n  | {\n      type: \"MOVE_LIST\";\n      payload: {\n        draggedId: string;\n        hoverId: string;\n      };\n    }\n  | {\n      type: \"SET_DRAGGED_ITEM\";\n      payload: DragItem | null;\n    };\n\nexport const addTask = (text: string, listId: string): Action => ({\n  type: \"ADD_TASK\",\n  payload: {\n    text,\n    listId,\n  },\n});\n\nexport const addList = (text: string): Action => ({\n  type: \"ADD_LIST\",\n  payload: text,\n});\n\nexport const moveList = (draggedId: string, hoverId: string): Action => ({\n  type: \"MOVE_LIST\",\n  payload: {\n    draggedId,\n    hoverId,\n  },\n});\n\nexport const setDraggedItem = (draggedItem: DragItem | null): Action => ({\n  type: \"SET_DRAGGED_ITEM\",\n  payload: draggedItem,\n});\n","import { DragItem } from \"../DragItem\";\n\nexport const isHidden = (\n  draggedItem: DragItem | null,\n  itemType: string,\n  id: string\n): boolean => {\n  return Boolean(\n    draggedItem && draggedItem.type === itemType && draggedItem.id === id\n  );\n};\n","import { ColumnContainer, ColumnTitle } from \"../styles\";\nimport { useAppState } from \"../store/AppStateContext\";\nimport { Card } from \"./Card\";\nimport { AddNewItem } from \"./AddNewItem\";\nimport { addTask, moveList } from \"../store/actions\";\nimport { useRef } from \"react\";\nimport { useItemDrag } from \"../hooks/useItemDrag\";\nimport { useDrop } from \"react-dnd\";\nimport { isHidden } from \"../utils/isHidden\";\n\ntype ColumnProps = {\n  text: string;\n  id: string;\n};\n\nexport const Column = ({ text, id }: ColumnProps) => {\n  const { draggedItem, getTasksByListId, dispatch } = useAppState();\n  const tasks = getTasksByListId(id);\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [, drop] = useDrop({\n    accept: \"COLUMN\",\n    hover() {\n      if (!draggedItem) {\n        return;\n      }\n      if (draggedItem.type === \"COLUMN\") {\n        if (draggedItem.id === id) {\n          return;\n        }\n        dispatch(moveList(draggedItem.id, id));\n      }\n    },\n  });\n\n  const { drag } = useItemDrag({ type: \"COLUMN\", id, text });\n\n  drag(drop(ref));\n\n  return (\n    <ColumnContainer ref={ref} isHidden={isHidden(draggedItem, \"COLUMN\", id)}>\n      <ColumnTitle>{text}</ColumnTitle>\n      {tasks.map((task) => (\n        <Card text={task.text} key={task.id} id={task.id} />\n      ))}\n      <AddNewItem\n        toggleButtonText=\"+ Add another task\"\n        onAdd={(text) => dispatch(addTask(text, id))}\n        dark\n      />\n    </ColumnContainer>\n  );\n};\n","import { DragItem } from \"../DragItem\";\nimport { useAppState } from \"../store/AppStateContext\";\nimport { setDraggedItem } from \"../store/actions\";\nimport { useDrag } from \"react-dnd\";\n\nexport const useItemDrag = (item: DragItem) => {\n  const { dispatch } = useAppState();\n  const [, drag] = useDrag({\n    type: item.type,\n    item: () => {\n      dispatch(setDraggedItem(item));\n      return item;\n    },\n    end: () => dispatch(setDraggedItem(null)),\n  });\n  return { drag };\n};\n","import { AppContainer } from \"./styles\";\nimport { FC } from \"react\";\nimport { AddNewItem } from \"./components/AddNewItem\";\nimport { Column } from \"./components/Column\";\nimport { useAppState } from \"./store/AppStateContext\";\nimport { addList } from \"./store/actions\";\n\nexport const App: FC = ({ children }) => {\n  const { lists, dispatch } = useAppState();\n\n  return (\n    <AppContainer>\n      {lists.map((list) => (\n        <Column text={list.text} key={list.id} id={list.id} />\n      ))}\n      <AddNewItem\n        toggleButtonText=\"+ Add another list\"\n        onAdd={(text) => dispatch(addList(text))}\n      />\n    </AppContainer>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport { AppStateProvider } from \"./store/AppStateContext\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend as Backend } from \"react-dnd-html5-backend\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={Backend}>\n      <AppStateProvider>\n        <App />\n      </AppStateProvider>\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}